{% extends 'base.html.twig' %}

{% block title %}{{ 'app.title'|trans }}{% endblock %}

{% block body %}
<script>
  window.T = {
    tabs: {
      time: {{ 'tabs.time'|trans|json_encode|raw }},
      customers: {{ 'tabs.customers'|trans|json_encode|raw }},
      projects: {{ 'tabs.projects'|trans|json_encode|raw }},
      activities: {{ 'tabs.activities'|trans|json_encode|raw }}
    },
    headings: {
      new_time_booking: {{ 'headings.new_time_booking'|trans|json_encode|raw }},
      bookings: {{ 'headings.bookings'|trans|json_encode|raw }},
      projects: {{ 'headings.projects'|trans|json_encode|raw }}
    },
    table: {
      id: {{ 'table.id'|trans|json_encode|raw }},
      project: {{ 'table.project'|trans|json_encode|raw }},
      activity: {{ 'table.activity'|trans|json_encode|raw }},
      ticket: {{ 'table.ticket'|trans|json_encode|raw }},
      start: {{ 'table.start'|trans|json_encode|raw }},
      end: {{ 'table.end'|trans|json_encode|raw }},
      duration_min: {{ 'table.duration_min'|trans|json_encode|raw }},
      actions: {{ 'table.actions'|trans|json_encode|raw }}
    },
    confirm: {
      delete_entry: {{ 'confirm.delete_entry'|trans|json_encode|raw }},
      delete_project: {{ 'confirm.delete_project'|trans|json_encode|raw }}
    },
    buttons: {
      save: {{ 'buttons.save'|trans|json_encode|raw }},
      update: {{ 'buttons.update'|trans|json_encode|raw }},
      cancel: {{ 'buttons.cancel'|trans|json_encode|raw }},
      delete: {{ 'buttons.delete'|trans|json_encode|raw }},
      create: {{ 'buttons.create'|trans|json_encode|raw }}
    },
    fields: {
      project: {{ 'fields.project'|trans|json_encode|raw }},
      activity_optional: {{ 'fields.activity_optional'|trans|json_encode|raw }},
      ticket: {{ 'fields.ticket'|trans|json_encode|raw }},
      start: {{ 'fields.start'|trans|json_encode|raw }},
      end: {{ 'fields.end'|trans|json_encode|raw }},
      duration_optional: {{ 'fields.duration_optional'|trans|json_encode|raw }},
      name: {{ 'fields.name'|trans|json_encode|raw }},
      customer: {{ 'fields.customer'|trans|json_encode|raw }},
      ticket_url: {{ 'fields.ticket_url'|trans|json_encode|raw }},
      ticket_login: {{ 'fields.ticket_login'|trans|json_encode|raw }},
      ticket_credentials: {{ 'fields.ticket_credentials'|trans|json_encode|raw }},
      please_select: {{ 'common.please_select'|trans|json_encode|raw }},
      none: {{ 'common.none'|trans|json_encode|raw }}
    },
    crud: {
      customers: {{ 'crud.customers'|trans|json_encode|raw }},
      activities: {{ 'crud.activities'|trans|json_encode|raw }}
    }
  };
</script>
{% verbatim %}
<div id="app">
  <div class="mb-4 border-bottom">
    <ul class="nav nav-tabs">
      <li class="nav-item"><button id="tab-time" class="nav-link" :class="{active: tab==='time'}" @click="tab='time'">{{ T.tabs.time }}</button></li>
      <li class="nav-item"><button id="tab-customers" class="nav-link" :class="{active: tab==='customers'}" @click="tab='customers'">{{ T.tabs.customers }}</button></li>
      <li class="nav-item"><button id="tab-projects" class="nav-link" :class="{active: tab==='projects'}" @click="tab='projects'">{{ T.tabs.projects }}</button></li>
      <li class="nav-item"><button id="tab-activities" class="nav-link" :class="{active: tab==='activities'}" @click="tab='activities'">{{ T.tabs.activities }}</button></li>
    </ul>
  </div>

  <!-- Zeitbuchungen -->
  <section id="section-time" v-if="tab==='time'">
    <h2 class="h4 mb-3">{{ T.headings.new_time_booking }}</h2>
    <form @submit.prevent="saveTimeBooking" class="one-line">
      <div class="field">
        <label class="form-label">{{ T.fields.project }}</label>
        <select id="input-time-project" v-model.number="timeForm.projectId" class="form-select" required>
          <option :value="''" disabled>{{ T.fields.please_select }}</option>
          <option v-for="p in projects" :key="p.id" :value="p.id">{{ p.name }}</option>
        </select>
      </div>
      <div class="field">
        <label class="form-label">{{ T.fields.activity_optional }}</label>
        <select id="input-time-activity" v-model.number="timeForm.activityId" class="form-select">
          <option :value="null">{{ T.fields.none }}</option>
          <option v-for="a in activities" :key="a.id" :value="a.id">{{ a.name }}</option>
        </select>
      </div>
      <div class="field small">
        <label class="form-label">{{ T.fields.ticket }}</label>
        <input id="input-time-ticket" v-model.trim="timeForm.ticketNumber" class="form-control" required>
      </div>
      <div class="field">
        <label class="form-label">{{ T.fields.start }}</label>
        <input id="input-time-start" v-model="timeForm.startedAtLocal" type="datetime-local" class="form-control" required>
      </div>
      <div class="field">
        <label class="form-label">{{ T.fields.end }}</label>
        <input id="input-time-end" v-model="timeForm.endedAtLocal" type="datetime-local" class="form-control" required>
      </div>
      <div class="field xs">
        <label class="form-label">{{ T.fields.duration_optional }}</label>
        <input id="input-time-duration" v-model.number="timeForm.durationMinutes" type="number" min="1" class="form-control" placeholder="Auto">
      </div>
      <div class="btn-wrap">
        <button id="btn-time-save" type="submit" class="btn btn-primary">{{ timeForm.id ? T.buttons.update : T.buttons.save }}</button>
      </div>
      <div class="btn-wrap" v-if="timeForm.id">
        <button type="button" class="btn btn-secondary" @click="resetTimeForm">{{ T.buttons.cancel }}</button>
      </div>
    </form>

    <div v-if="error" class="alert alert-danger mt-3">{{ error }}</div>

    <hr class="my-4">
    <h2 class="h5">{{ T.headings.bookings }}</h2>
    <div class="table-responsive">
      <table class="table table-striped align-middle">
        <thead>
          <tr>
            <th>{{ T.table.id }}</th>
            <th>{{ T.table.project }}</th>
            <th>{{ T.table.activity }}</th>
            <th>{{ T.table.ticket }}</th>
            <th>{{ T.table.start }}</th>
            <th>{{ T.table.end }}</th>
            <th>{{ T.table.duration_min }}</th>
            <th class="text-end">{{ T.table.actions }}</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="tb in timeBookings" :key="tb.id" @click="editTime(tb)" class="clickable-row">
            <td>{{ tb.id }}</td>
            <td>{{ projectName(tb.projectId) }}</td>
            <td>{{ activityName(tb.activityId) }}</td>
            <td>{{ tb.ticketNumber }}</td>
            <td>{{ formatDateTime(tb.startedAt) }}</td>
            <td>{{ formatDateTime(tb.endedAt) }}</td>
            <td>{{ tb.durationMinutes }}</td>
            <td class="text-end">
              <button class="btn btn-sm btn-outline-danger" @click.stop="deleteTime(tb)">{{ T.buttons.delete }}</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </section>

  <!-- Kunden -->
  <section id="section-customers" v-if="tab==='customers'">
    <crud-entity :t="T" :title="T.crud.customers" :columns="[{key:'id',label:T.table.id},{key:'name',label:T.fields.name}]"
                 :items="customers"
                 :empty-item="{name:''}"
                 @refresh="loadCustomers"
                 create-url="/api/customers"
                 :update-url="id => `/api/customers/${id}`"
                 :delete-url="id => `/api/customers/${id}`"
                 :save-id="'btn-customers-save'"
                 :input-id="'input-customer-name'">
    </crud-entity>
  </section>

  <!-- Tätigkeiten -->
  <section id="section-activities" v-if="tab==='activities'">
    <crud-entity :t="T" :title="T.crud.activities" :columns="[{key:'id',label:T.table.id},{key:'name',label:T.fields.name}]"
                 :items="activities"
                 :empty-item="{name:''}"
                 @refresh="loadActivities"
                 create-url="/api/activities"
                 :update-url="id => `/api/activities/${id}`"
                 :delete-url="id => `/api/activities/${id}`"
                 :save-id="'btn-activities-save'"
                 :input-id="'input-activity-name'">
    </crud-entity>
  </section>

  <!-- Projekte -->
  <section id="section-projects" v-if="tab==='projects'">
    <h2 class="h4 mb-3">{{ T.headings.projects }}</h2>
    <form @submit.prevent="saveProject" class="one-line">
      <div class="field">
        <label class="form-label">{{ T.fields.name }}</label>
        <input id="input-project-name" v-model.trim="projectForm.name" class="form-control" required>
      </div>
      <div class="field">
        <label class="form-label">{{ T.fields.customer }}</label>
        <select id="input-project-customer" v-model.number="projectForm.customerId" class="form-select" required>
          <option :value="''" disabled>{{ T.fields.please_select }}</option>
          <option v-for="c in customers" :key="c.id" :value="c.id">{{ c.name }}</option>
        </select>
      </div>
      <div class="field">
        <label class="form-label">{{ T.fields.ticket_url }}</label>
        <input id="input-project-ticket-url" v-model.trim="projectForm.externalTicketUrl" class="form-control" placeholder="https://…">
      </div>
      <div class="field small">
        <label class="form-label">{{ T.fields.ticket_login }}</label>
        <input id="input-project-ticket-login" v-model.trim="projectForm.externalTicketLogin" class="form-control">
      </div>
      <div class="field">
        <label class="form-label">{{ T.fields.ticket_credentials }}</label>
        <input id="input-project-ticket-credentials" v-model.trim="projectForm.externalTicketCredentials" class="form-control">
      </div>
      <div class="btn-wrap">
        <button id="btn-project-save" type="submit" class="btn btn-primary">{{ projectForm.id ? T.buttons.update : T.buttons.save }}</button>
      </div>
      <div class="btn-wrap" v-if="projectForm.id">
        <button type="button" class="btn btn-secondary" @click="resetProjectForm">{{ T.buttons.cancel }}</button>
      </div>
    </form>

    <div class="table-responsive">
      <table class="table table-striped align-middle">
        <thead>
        <tr>
          <th>{{ T.table.id }}</th><th>{{ T.fields.name }}</th><th>{{ T.fields.customer }}</th><th>{{ T.fields.ticket_url }}</th><th>{{ T.fields.ticket_login }}</th><th>{{ T.fields.ticket_credentials }}</th><th class="text-end">{{ T.table.actions }}</th>
        </tr>
        </thead>
        <tbody>
        <tr v-for="p in projects" :key="p.id" @click="editProject(p)" class="clickable-row">
          <td>{{ p.id }}</td>
          <td>{{ p.name }}</td>
          <td>{{ customerName(p.customerId) }}</td>
          <td class="text-truncate max-220">{{ p.externalTicketUrl }}</td>
          <td>{{ p.externalTicketLogin }}</td>
          <td class="text-truncate max-220">{{ p.externalTicketCredentials }}</td>
          <td class="text-end">
            <button class="btn btn-sm btn-outline-danger" @click.stop="deleteProject(p)">{{ T.buttons.delete }}</button>
          </td>
        </tr>
        </tbody>
      </table>
    </div>
  </section>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
<script>
const { createApp, reactive, ref, onMounted, computed, watch } = Vue;

function apiUrl(url){
  try {
    const base = window.APP_BASE || '';
    if (typeof url === 'string' && url.startsWith('/')) {
      return base + url;
    }
    return url;
  } catch(e){ return url; }
}

function jsonFetch(url, options = {}) {
  const opts = Object.assign({
    credentials: 'same-origin',
    headers: {'Content-Type': 'application/json', 'X-Requested-With': 'fetch'},
  }, options);
  return fetch(apiUrl(url), opts).then(async res => {
    const text = await res.text();
    let data;
    try { data = text ? JSON.parse(text) : null; } catch(e) { data = text; }
    if (!res.ok) {
      const msg = (data && data.error) ? data.error : (`HTTP ${res.status}`);
      throw new Error(msg);
    }
    return data;
  });
}

createApp({
  setup() {
    const T = window.T || {};
    const tab = ref('time');
    const error = ref('');

    // shared lists
    const customers = ref([]);
    const activities = ref([]);
    const projects = ref([]);

    // time bookings
    const timeBookings = ref([]);
    // Prefill datetime fields with current local time and +15 minutes
    const now = new Date();
    const startDefault = toLocalInputValue(now);
    const endDefault = toLocalInputValue(addMinutes(now, 15));
    const timeForm = reactive({ id:null, projectId:'', activityId:null, ticketNumber:'', startedAtLocal:startDefault, endedAtLocal:endDefault, durationMinutes:null });

    function resetTimeForm() {
      const nowReset = new Date();
      Object.assign(timeForm, { id:null, projectId:'', activityId:null, ticketNumber:'', startedAtLocal: toLocalInputValue(nowReset), endedAtLocal: toLocalInputValue(addMinutes(nowReset, 15)), durationMinutes:null });
    }

    function localToIso(local) {
      if (!local) return '';
      // treat local as local time; convert to ISO with timezone offset
      const dt = new Date(local);
      return dt.toISOString();
    }

    function isoToLocal(iso) {
      if (!iso) return '';
      const d = new Date(iso);
      const pad = n => n.toString().padStart(2,'0');
      return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
    }

    function formatDateTime(iso) {
      try { const d = new Date(iso); return d.toLocaleString(); } catch(e) { return iso; }
    }

    function projectName(id) { const p = projects.value.find(x=>x.id===id); return p? p.name : id; }
    function activityName(id) { if(id==null) return ''; const a = activities.value.find(x=>x.id===id); return a? a.name : id; }
    function customerName(id) { const c = customers.value.find(x=>x.id===id); return c? c.name : id; }

    async function loadCustomers() { customers.value = await jsonFetch('/api/customers'); // Set default customer for new project form if not set or invalid
          if (!projectForm.customerId || !customers.value.some(c => c.id === projectForm.customerId)) {
            projectForm.customerId = customers.value.length ? customers.value[0].id : '';
          }
        }
    async function loadActivities() { activities.value = await jsonFetch('/api/activities'); }
    async function loadProjects() { projects.value = await jsonFetch('/api/projects'); }
    async function loadTimeBookings() { timeBookings.value = await jsonFetch('/api/time-bookings'); }

    async function saveTimeBooking() {
      error.value='';
      try {
        const payload = {
          projectId: Number(timeForm.projectId),
          activityId: timeForm.activityId === null || timeForm.activityId === '' ? null : Number(timeForm.activityId),
          ticketNumber: timeForm.ticketNumber,
          startedAt: localToIso(timeForm.startedAtLocal),
          endedAt: localToIso(timeForm.endedAtLocal),
        };
        if (timeForm.durationMinutes) payload.durationMinutes = Number(timeForm.durationMinutes);
        if (timeForm.id) {
          // update
          const updated = await jsonFetch(`/api/time-bookings/${timeForm.id}`, { method:'PUT', body: JSON.stringify(payload) });
          const idx = timeBookings.value.findIndex(x=>x.id===updated.id);
          if (idx>=0) timeBookings.value[idx] = updated; else timeBookings.value.unshift(updated);
        } else {
          const created = await jsonFetch('/api/time-bookings', { method:'POST', body: JSON.stringify(payload) });
          timeBookings.value.unshift(created);
        }
        resetTimeForm();
      } catch(e) { error.value = e.message || String(e); }
    }

    function editTime(tb) {
      Object.assign(timeForm, {
        id: tb.id,
        projectId: tb.projectId,
        activityId: tb.activityId ?? null,
        ticketNumber: tb.ticketNumber,
        startedAtLocal: isoToLocal(tb.startedAt),
        endedAtLocal: isoToLocal(tb.endedAt),
        durationMinutes: tb.durationMinutes,
      });
      tab.value = 'time';
    }

    async function deleteTime(tb) {
      if (!confirm(T.confirm.delete_entry)) return;
      try {
        await jsonFetch(`/api/time-bookings/${tb.id}`, { method:'DELETE' });
        timeBookings.value = timeBookings.value.filter(x=>x.id!==tb.id);
        if (timeForm.id===tb.id) resetTimeForm();
      } catch(e) { error.value = e.message || String(e); }
    }

    // Projects
    const projectForm = reactive({ id:null, name:'', customerId:'', externalTicketUrl:'', externalTicketLogin:'', externalTicketCredentials:'' });
    function resetProjectForm(){ const defaultCustomer = customers.value.length ? customers.value[0].id : ''; Object.assign(projectForm, { id:null, name:'', customerId: defaultCustomer, externalTicketUrl:'', externalTicketLogin:'', externalTicketCredentials:'' }); }
    function editProject(p){ Object.assign(projectForm, { ...p }); }
    async function saveProject(){
      const payload = { name: projectForm.name, customerId: Number(projectForm.customerId), externalTicketUrl: emptyToNull(projectForm.externalTicketUrl), externalTicketLogin: emptyToNull(projectForm.externalTicketLogin), externalTicketCredentials: emptyToNull(projectForm.externalTicketCredentials) };
      if (projectForm.id) {
        const updated = await jsonFetch(`/api/projects/${projectForm.id}`, { method:'PUT', body: JSON.stringify(payload) });
        const idx = projects.value.findIndex(x=>x.id===updated.id);
        if (idx>=0) projects.value[idx] = updated; else projects.value.unshift(updated);
      } else {
        const created = await jsonFetch('/api/projects', { method:'POST', body: JSON.stringify(payload) });
        projects.value.unshift(created);
      }
      resetProjectForm();
    }
    async function deleteProject(p){ if(!confirm(T.confirm.delete_project)) return; await jsonFetch(`/api/projects/${p.id}`, { method:'DELETE' }); projects.value = projects.value.filter(x=>x.id!==p.id); if(projectForm.id===p.id) resetProjectForm(); }

    function emptyToNull(v){ return v===null || v===undefined || v==='' ? null : v; }

    // Helpers for datetime-local strings
    function toLocalInputValue(d) {
      const pad = n => n.toString().padStart(2,'0');
      return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
    }
    function parseLocalInputValue(s) {
      // s like YYYY-MM-DDTHH:MM
      if (!s) return null;
      const d = new Date(s);
      return isNaN(d.getTime()) ? null : d;
    }
    function addMinutes(date, minutes) {
      return new Date(date.getTime() + minutes*60000);
    }

    // Auto-sync rules between startedAtLocal (von) and endedAtLocal (bis)
    watch(() => timeForm.startedAtLocal, (newVal, oldVal) => {
      const start = parseLocalInputValue(newVal);
      if (!start) return;
      const end = parseLocalInputValue(timeForm.endedAtLocal);
      if (!end) {
        // If end is empty, set to start + 15 minutes
        timeForm.endedAtLocal = toLocalInputValue(addMinutes(start, 15));
        return;
      }
      // Ensure end is not before start; if it is, move end to start + 15
      if (end.getTime() < start.getTime()) {
        timeForm.endedAtLocal = toLocalInputValue(addMinutes(start, 15));
      }
    });

    watch(() => timeForm.endedAtLocal, (newVal, oldVal) => {
      const end = parseLocalInputValue(newVal);
      if (!end) return;
      const start = parseLocalInputValue(timeForm.startedAtLocal);
      if (!start) {
        // If start is empty, set to end - 15 minutes
        timeForm.startedAtLocal = toLocalInputValue(addMinutes(end, -15));
        return;
      }
      // If end is before start, adjust start to end - 15 to keep at least 0 interval and follow UX rule
      if (end.getTime() < start.getTime()) {
        timeForm.startedAtLocal = toLocalInputValue(addMinutes(end, -15));
      }
    });

    onMounted(async () => {
      await Promise.all([loadCustomers(), loadActivities()]);
      await loadProjects();
      await loadTimeBookings();
    });

    return { T, tab, error, customers, activities, projects, timeBookings, timeForm, projectForm,
      // expose loaders so @refresh handlers in templates can call them
      loadCustomers, loadActivities, loadProjects, loadTimeBookings,
      saveTimeBooking, resetTimeForm, formatDateTime, projectName, activityName, customerName,
      editTime, deleteTime, saveProject, editProject, deleteProject, resetProjectForm };
  },
  components: {
    'crud-entity': {
      props: ['title','columns','items','emptyItem','createUrl','updateUrl','deleteUrl','t','saveId','inputId'],
      emits: ['refresh'],
      setup(props, { emit }){
        const form = reactive({});
        const editingId = ref(null);
        const error = ref('');
        function reset(){ Object.assign(form, JSON.parse(JSON.stringify(props.emptyItem))); editingId.value=null; }
        onMounted(()=> reset());
        function startEdit(item){ Object.assign(form, JSON.parse(JSON.stringify(item))); editingId.value = item.id; }
        async function save(){
          error.value='';
          // Frontend validation: prevent empty name for entities that have a name field
          if (Object.prototype.hasOwnProperty.call(form, 'name')) {
            const nameVal = String(form['name'] ?? '').trim();
            if (nameVal === '') {
              error.value = 'Field "name" is required';
              return;
            }
          }
          try{
            const payload = JSON.stringify(form);
            if (editingId.value){
              const url = typeof props.updateUrl==='function' ? props.updateUrl(editingId.value) : props.updateUrl;
              const updated = await jsonFetch(url, { method:'PUT', body: payload });
            } else {
              const created = await jsonFetch(props.createUrl, { method:'POST', body: payload });
            }
            reset();
            emit('refresh');
          } catch(e){ error.value = e.message || String(e); }
        }
        async function remove(item){ if(!confirm(props.t.confirm.delete_entry)) return; try{ const url = typeof props.deleteUrl==='function' ? props.deleteUrl(item.id) : props.deleteUrl; await jsonFetch(url, { method:'DELETE' }); emit('refresh'); if(editingId.value===item.id) reset(); } catch(e){ error.value = e.message || String(e); } }

        return { form, editingId, error, reset, startEdit, save, remove };
      },
      template: `
      <div>
        <h2 class="h4 mb-3">{{ title }}</h2>
        <form @submit.prevent="save" class="one-line">
          <template v-for="col in columns" :key="col.key">
            <div v-if="col.key!=='id'" class="field">
              <label class="form-label">{{ col.label }}</label>
              <input :id="inputId || null" v-model.trim="form[col.key]" class="form-control" :required="col.key==='name'">
            </div>
          </template>
          <div class="btn-wrap">
            <button :id="saveId || null" type="submit" class="btn btn-primary">{{ editingId ? t.buttons.update : t.buttons.create }}</button>
          </div>
          <div class="btn-wrap" v-if="editingId">
            <button type="button" class="btn btn-secondary" @click="reset">{{ t.buttons.cancel }}</button>
          </div>
        </form>
        <div v-if="error" class="alert alert-danger">{{ error }}</div>
        <div class="table-responsive">
          <table class="table table-striped align-middle">
            <thead>
              <tr>
                <th v-for="col in columns" :key="col.key">{{ col.label }}</th>
                <th class="text-end">{{ t.table.actions }}</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="item in items" :key="item.id" @click="startEdit(item)" class="clickable-row">
                <td v-for="col in columns" :key="col.key">{{ item[col.key] }}</td>
                <td class="text-end">
                  <button class="btn btn-sm btn-outline-danger" @click.stop="remove(item)">Löschen</button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      `
    }
  }
}).mount('#app');
</script>
{% endverbatim %}
{% endblock %}
